import Head from "next/head";
import Dump from "../components/Dump";
import { useState, useEffect } from "react";
import {
  collection,
  query,
  orderBy,
  onSnapshot,
  doc,
  setDoc,
  getDoc,
  updateDoc,
} from "firebase/firestore";
import { db, auth } from "../firebase";
import Votes from "../components/Votes";
import { useAuthState } from "react-firebase-hooks/auth";

export default function Home() {
  const [user] = useAuthState(auth);
  const [allDumps, setAllDumps] = useState();

  const getAllData = async () => {
    const dumpCollectionRef = collection(db, "dumps");
    const q = query(dumpCollectionRef, orderBy("timestamp", "desc"));
    const unsubscribe = onSnapshot(q, (snapshot) => {
      setAllDumps(snapshot.docs.map((doc) => ({ ...doc.data(), id: doc.id })));
    });

    return unsubscribe;
  };

  useEffect(() => {
    getAllData();
  }, []);

  const onVote = async (postId, vote, userId) => {
    const postRef = doc(db, "dumps", postId);
    const document = await getDoc(postRef);
    const documentData = document.data();
    const { voteCount, postVotes } = documentData;

    const existingVote = documentData?.postVotes.find(
      (vote) => vote.id !== userId
    );
    if (!existingVote) {
      await updateDoc(postRef, {
        voteCount: voteCount + vote,
        postVotes: [...postVotes, userId],
      });
    } else {
      // check if user removing existing upvote or downvote
    }
  };

  return (
    <div className="md:w-1/2 mx-auto">
      <Head>
        <title>braindump</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="bg-slate-600 rounded p-2">
        <h1 className="text-teal-50 text-center font-bold">Latest Posts</h1>
        {allDumps?.map((dump) => (
          <div key={dump.id} className="flex">
            <Votes
              currentVoteCount={dump.voteCount}
              id={dump.id}
              dump={dump}
              onVote={onVote}
            />
            <Dump dump={dump} />
          </div>
        ))}
      </div>
    </div>
  );
}
